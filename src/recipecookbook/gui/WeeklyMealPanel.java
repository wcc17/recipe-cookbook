package recipecookbook.gui;

import java.sql.Date;
import java.text.DateFormatSymbols;
import java.time.LocalDate;
import java.time.temporal.TemporalField;
import java.time.temporal.WeekFields;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import recipecookbook.models.Constants;
import recipecookbook.models.Ingredient;
import recipecookbook.models.Meal;
import recipecookbook.models.Recipe;
import recipecookbook.models.RecipeIngredient;
import recipecookbook.models.RecipeMeal;
import recipecookbook.services.IngredientService;
import recipecookbook.services.MealService;
import recipecookbook.services.RecipeIngredientService;
import recipecookbook.services.RecipeMealService;
import recipecookbook.services.RecipeService;

public class WeeklyMealPanel extends javax.swing.JPanel {
    public boolean initialized = false;
    
    List<Meal> meals = new ArrayList<>();
    List<RecipeMeal> recipeMeals = new ArrayList<>();
    List<Recipe> recipes = new ArrayList<>();
    LocalDate weekStart = null;

    /**
     * Creates new form WeeklyMealPanel
     */
    public WeeklyMealPanel() {
        initComponents();
    }
    
    public void initialize() {
        System.out.println("Initializing Weekly Meal Panel");
        initializeDayOfWeekComboBox();
        initializeMeals();
        initializeRecipes();
        
        initialized = true;
    }
    
    //fill the day of week drop down with names of the days of the week
    private void initializeDayOfWeekComboBox() {
        DefaultComboBoxModel weekDayComboBoxModel = new DefaultComboBoxModel();
        String[] weekDays = DateFormatSymbols.getInstance().getWeekdays();
        for(String weekDay : weekDays) {
            weekDayComboBoxModel.addElement(weekDay);
        }
        dayOfWeekComboBox.setModel(weekDayComboBoxModel);
    }
    
    //get all the meals from the current week
    private void initializeMeals() {
        TemporalField fieldUS = WeekFields.of(Locale.US).dayOfWeek();
        weekStart = LocalDate.now().with(fieldUS, 1);
        meals = MealService.getAllMealsFromWeek(weekStart);
        
        weekStartLabel.setText(weekStart.toString());
    }
    
    //get all recipes and put them in each meal type drop down
    private void initializeRecipes() {
        recipeMeals = RecipeMealService.getAllRecipeMealsFromMeals(meals);
        
        recipes = RecipeService.getAllRecipes();
        Recipe[] recipeArray = new Recipe[recipes.size()];
        for(int i = 0; i < recipeArray.length; i++) {
            recipeArray[i] = recipes.get(i);
        }
        
        //set up combo boxes with all recipes
        DefaultComboBoxModel breakfastComboBoxModel = new DefaultComboBoxModel(recipeArray);
        DefaultComboBoxModel lunchComboBoxModel = new DefaultComboBoxModel(recipeArray);
        DefaultComboBoxModel dinnerComboBoxModel = new DefaultComboBoxModel(recipeArray);
        breakfastComboBox.setModel(breakfastComboBoxModel);
        lunchComboBox.setModel(lunchComboBoxModel);
        dinnerComboBox.setModel(dinnerComboBoxModel);
        
        resetDayComboBoxes();
    }
    
    private void resetDayComboBoxes() {
        dayOfWeekComboBox.setSelectedIndex(-1);
        breakfastComboBox.setSelectedIndex(-1);
        lunchComboBox.setSelectedIndex(-1);
        dinnerComboBox.setSelectedIndex(-1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        breakfastComboBox = new javax.swing.JComboBox<>();
        lunchComboBox = new javax.swing.JComboBox<>();
        dinnerComboBox = new javax.swing.JComboBox<>();
        saveMealsButton = new javax.swing.JButton();
        generateListButton = new javax.swing.JButton();
        dayOfWeekComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        weekLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        weekStartLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ingredientList = new javax.swing.JList<>();
        jLabel5 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(506, 665));

        saveMealsButton.setText("Save Meals");
        saveMealsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMealsButtonActionPerformed(evt);
            }
        });

        generateListButton.setText("Generate List");
        generateListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateListButtonActionPerformed(evt);
            }
        });

        dayOfWeekComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dayOfWeekComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setText("Day of the Week:");

        weekLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        weekLabel.setText("Week Start:");

        jLabel2.setText("Breakfast");

        jLabel3.setText("Lunch");

        jLabel4.setText("Dinner");

        weekStartLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        jScrollPane1.setViewportView(ingredientList);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("Shopping List:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(weekLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(weekStartLabel))
                            .addComponent(jLabel5))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(generateListButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel1))
                            .addComponent(dayOfWeekComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2)
                                .addGap(84, 84, 84))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(6, 6, 6)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel4))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(dinnerComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, 257, Short.MAX_VALUE)
                                        .addComponent(lunchComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(breakfastComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGap(6, 6, 6))))
                        .addComponent(saveMealsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(weekLabel)
                    .addComponent(weekStartLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dayOfWeekComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveMealsButton)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(breakfastComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(jLabel3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lunchComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(jLabel4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dinnerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(generateListButton)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void saveMealsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMealsButtonActionPerformed
        String dayOfWeek = ((String) dayOfWeekComboBox.getSelectedItem()).toLowerCase();

        Recipe breakfastRecipe = (Recipe) breakfastComboBox.getSelectedItem();
        Recipe lunchRecipe = (Recipe) lunchComboBox.getSelectedItem();
        Recipe dinnerRecipe = (Recipe) dinnerComboBox.getSelectedItem();

        Meal breakfastMeal = matchMealToRecipe(breakfastRecipe, dayOfWeek);
        Meal lunchMeal = matchMealToRecipe(lunchRecipe, dayOfWeek);
        Meal dinnerMeal = matchMealToRecipe(dinnerRecipe, dayOfWeek);

        RecipeMeal breakfastRecipeMeal = matchRecipeMeal(breakfastRecipe, breakfastMeal);
        RecipeMeal lunchRecipeMeal = matchRecipeMeal(lunchRecipe, lunchMeal);
        RecipeMeal dinnerRecipeMeal = matchRecipeMeal(dinnerRecipe, dinnerMeal);

        saveRecipeMeal(breakfastRecipe, breakfastMeal, breakfastRecipeMeal, dayOfWeek, Constants.BREAKFAST);
        saveRecipeMeal(lunchRecipe, lunchMeal, lunchRecipeMeal, dayOfWeek, Constants.LUNCH);
        saveRecipeMeal(dinnerRecipe, dinnerMeal, dinnerRecipeMeal, dayOfWeek, Constants.DINNER);

        System.out.println("All meals saved");

        //reinitialize Meals, Recipes, and RecipeMeal objects
        initializeMeals();
        initializeRecipes();
    }//GEN-LAST:event_saveMealsButtonActionPerformed

    private void generateListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateListButtonActionPerformed
        List<String> recipeNames = new ArrayList<>();
        for(RecipeMeal recipeMeal : recipeMeals) {
            recipeNames.add(recipeMeal.getRecipeName());
        }

        List<RecipeIngredient> recipeIngredients = RecipeIngredientService.getRecipeIngredientsFromRecipeName(recipeNames);
        List<String> ingredientNames = new ArrayList<>();
        for(RecipeIngredient recipeIngredient : recipeIngredients) {
            ingredientNames.add(recipeIngredient.getIngredientName());
        }
        List<Ingredient> ingredients = IngredientService.getIngredientsByNames(ingredientNames);
        List<Ingredient> ingredientsNotInFridge = new ArrayList<>();

        for(Ingredient ingredient : ingredients) {
            if(!ingredient.isInFridge()) {
                ingredientsNotInFridge.add(ingredient);
            }
        }

        DefaultListModel ingredientListModel = new DefaultListModel();
        for(Ingredient ingredient : ingredientsNotInFridge) {
            ingredientListModel.addElement(ingredient.getName());
        }
        ingredientList.setModel(ingredientListModel);
    }//GEN-LAST:event_generateListButtonActionPerformed

    private void dayOfWeekComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dayOfWeekComboBoxActionPerformed

        if(dayOfWeekComboBox.getSelectedItem() != null) {
            //when a day is selected we need to change each of the meal combo boxes to reflect the meal chosen on that certain day
            String dayOfWeek = ((String) dayOfWeekComboBox.getSelectedItem()).toLowerCase();

            for(Meal meal : meals) {
                if(meal.getDayOfWeek().equals(dayOfWeek)) {
                    switch(meal.getMealType()) {
                        case Constants.BREAKFAST:
                        breakfastComboBox.setSelectedItem(matchRecipeToMeal(meal));
                        break;
                        case Constants.LUNCH:
                        lunchComboBox.setSelectedItem(matchRecipeToMeal(meal));
                        break;
                        case Constants.DINNER:
                        dinnerComboBox.setSelectedItem(matchRecipeToMeal(meal));
                        break;
                    }
                }
            }
        }
    }//GEN-LAST:event_dayOfWeekComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<Recipe> breakfastComboBox;
    private javax.swing.JComboBox<String> dayOfWeekComboBox;
    private javax.swing.JComboBox<Recipe> dinnerComboBox;
    private javax.swing.JButton generateListButton;
    private javax.swing.JList<String> ingredientList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<Recipe> lunchComboBox;
    private javax.swing.JButton saveMealsButton;
    private javax.swing.JLabel weekLabel;
    private javax.swing.JLabel weekStartLabel;
    // End of variables declaration//GEN-END:variables
    
    private void saveRecipeMeal(Recipe recipe, Meal meal, RecipeMeal recipeMeal, String dayOfWeek, String mealType) {
        //if recipeMeal is not null, then theres already a recipeMeal for this specific recipe and meal, so no need to save anything
        if(recipeMeal == null) {
            
            //if recipe is null, then we didn't select anything
            if(recipe != null) {
                
                if(meal == null) {
                    //create a new Meal and save it to the database
                    meal = new Meal();
                    meal.setDayOfWeek(dayOfWeek.toLowerCase());
                    meal.setMealType(mealType);
                    meal.setWeekStart(Date.valueOf(weekStart));
                    
                    meal = MealService.createNewMeal(meal);
                    System.out.println("Created a new meal");
                } else {
                    //see if theres a RecipeMeal out there associated with another recipe. If so, delete it
                    RecipeMeal otherRecipeMeal = matchRecipeMealToMeal(meal);
                    if(otherRecipeMeal != null) {
                        RecipeMealService.deleteRecipeMealByRecipeMeal(recipeMeal);
                        System.out.println("Deleted old RecipeMeal");
                    }
                } 
                
                //save the new RecipeMeal object
                RecipeMealService.addRecipeToMeal(recipe, meal);
                System.out.println("Saved recipeMeal for mealType " + mealType);
            } else {
                //TODO: if no recipe is chosen, but a meal exists for this dayOfWeek and mealType, should we delete the meal? (and a recipeMeal?)
                for(Meal otherMeal : meals) {
                    if(otherMeal.getDayOfWeek().equals(dayOfWeek)
                            && otherMeal.getMealType().equals(mealType)
                            && otherMeal.getWeekStart().equals(Date.valueOf(weekStart))) {
                        System.out.println("Deleting existing meal after user removed recipe from it");
                        MealService.deleteMeal(otherMeal);
                        RecipeMealService.deleteRecipeMealByMeal(meal);
                    }
                }
            }
        }
    }
    
    private Recipe matchRecipeToMeal(Meal meal) {
        String recipeName = null;
        if(meal != null) {
            for(RecipeMeal recipeMeal : recipeMeals) {
                if(recipeMeal.getMealId().equals(meal.getId())) {
                    recipeName = recipeMeal.getRecipeName();
                    break;
                }
            }
            
            if(recipeName != null) {
                for(Recipe recipe : recipes) {
                    if(recipe.getName().equals(recipeName)) {
                        return recipe;
                    }
                }
            }
        }
        
        return null;
    }
    
    private Meal matchMealToRecipe(Recipe recipe, String dayOfWeek) {
        Integer mealId = null;
        if(recipe != null) {
            for(RecipeMeal recipeMeal : recipeMeals) {
                if(recipeMeal.getRecipeName().equals(recipe.getName())) {
                    mealId = recipeMeal.getMealId();
                    break;
                }
            }
            
            if(mealId != null) {
                for(Meal meal : meals) {
                    if(meal.getId().equals(mealId) 
                            && meal.getDayOfWeek().equals(dayOfWeek)) {
                        return meal;
                    }
                }
            }
        }
        
        return null;
    }
    
    private RecipeMeal matchRecipeMeal(Recipe recipe, Meal meal) {
        if(recipe != null && meal != null) {
            for(RecipeMeal recipeMeal : recipeMeals) {
                if(recipeMeal.getMealId().equals(meal.getId()) 
                        && recipeMeal.getRecipeName().equals(recipe.getName())) {
                    return recipeMeal;
                }
            }
        }
        
        return null;
    }
    
    private RecipeMeal matchRecipeMealToMeal(Meal meal) {
        if(meal != null) {
            for(RecipeMeal recipeMeal : recipeMeals) {
                if(recipeMeal.getMealId().equals(meal.getId())) {
                    return recipeMeal;
                }
            }
        }
        
        return null;
    }
}
