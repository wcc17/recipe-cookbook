/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package recipecookbook.gui;

import java.text.DateFormatSymbols;
import java.time.LocalDate;
import java.time.temporal.TemporalField;
import java.time.temporal.WeekFields;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import javax.swing.DefaultComboBoxModel;
import recipecookbook.models.Constants;
import recipecookbook.models.Meal;
import recipecookbook.models.Recipe;
import recipecookbook.models.RecipeMeal;
import recipecookbook.services.MealService;
import recipecookbook.services.RecipeMealService;
import recipecookbook.services.RecipeService;

/**
 *
 * @author MUKESH
 */
public class WeeklyMealFrame extends javax.swing.JFrame {
    List<Meal> meals = new ArrayList<>();
    List<RecipeMeal> recipeMeals = new ArrayList<>();
    List<Recipe> recipes = new ArrayList<>();

    /**
     * Creates new form WeeklyMealFrame
     */
    public WeeklyMealFrame() {
        initComponents();
        initializeDayOfWeekComboBox();
        initializeMeals();
        initializeRecipes();
    }
    
    //fill the day of week drop down with names of the days of the week
    private void initializeDayOfWeekComboBox() {
        DefaultComboBoxModel weekDayComboBoxModel = new DefaultComboBoxModel();
        String[] weekDays = DateFormatSymbols.getInstance().getWeekdays();
        for(String weekDay : weekDays) {
            weekDayComboBoxModel.addElement(weekDay);
        }
        dayOfWeekComboBox.setModel(weekDayComboBoxModel);
    }
    
    //get all the meals from the current week
    private void initializeMeals() {
        TemporalField fieldUS = WeekFields.of(Locale.US).dayOfWeek();
        LocalDate weekStart = LocalDate.now().with(fieldUS, 1);
        meals = MealService.getAllMealsFromWeek(weekStart);
    }
    
    //get all recipes and put them in each meal type drop down
    private void initializeRecipes() {
        recipeMeals = RecipeMealService.getAllRecipeMealsFromMeals(meals);
        
        recipes = RecipeService.getAllRecipes();
        Recipe[] recipeArray = new Recipe[recipes.size()];
        for(int i = 0; i < recipeArray.length; i++) {
            recipeArray[i] = recipes.get(i);
        }
        
        //set up combo boxes with all recipes
        DefaultComboBoxModel breakfastComboBoxModel = new DefaultComboBoxModel(recipeArray);
        DefaultComboBoxModel lunchComboBoxModel = new DefaultComboBoxModel(recipeArray);
        DefaultComboBoxModel dinnerComboBoxModel = new DefaultComboBoxModel(recipeArray);
        breakfastComboBox.setModel(breakfastComboBoxModel);
        lunchComboBox.setModel(lunchComboBoxModel);
        dinnerComboBox.setModel(dinnerComboBoxModel);
        
        resetDayComboBoxes();
    }
    
    private void resetDayComboBoxes() {
        breakfastComboBox.setSelectedIndex(-1);
        lunchComboBox.setSelectedIndex(-1);
        dinnerComboBox.setSelectedIndex(-1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        breakfastComboBox = new javax.swing.JComboBox<>();
        lunchComboBox = new javax.swing.JComboBox<>();
        dinnerComboBox = new javax.swing.JComboBox<>();
        saveMealsButton = new javax.swing.JButton();
        generateListButton = new javax.swing.JButton();
        dayOfWeekComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        startOfWeekLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        saveMealsButton.setText("Save Meals");
        saveMealsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMealsButtonActionPerformed(evt);
            }
        });

        generateListButton.setText("Generate List");
        generateListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateListButtonActionPerformed(evt);
            }
        });

        dayOfWeekComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dayOfWeekComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setText("Day of the Week:");

        startOfWeekLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        startOfWeekLabel.setText("Start of the Week:");

        jLabel2.setText("Breakfast");

        jLabel3.setText("Lunch");

        jLabel4.setText("Dinner");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2))
                    .addComponent(startOfWeekLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(dayOfWeekComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(breakfastComboBox, 0, 140, Short.MAX_VALUE)
                                .addComponent(lunchComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(dinnerComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(generateListButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(saveMealsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(startOfWeekLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(saveMealsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(generateListButton))
                    .addComponent(dayOfWeekComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(breakfastComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lunchComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dinnerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generateListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateListButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_generateListButtonActionPerformed

    private void dayOfWeekComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dayOfWeekComboBoxActionPerformed
        //when a day is selected we need to change each of the meal combo boxes to reflect the meal chosen on that certain day
        String dayOfWeek = ((String) dayOfWeekComboBox.getSelectedItem()).toLowerCase();
        
        resetDayComboBoxes();
        for(Meal meal : meals) {
            if(meal.getDayOfWeek().equals(dayOfWeek)) {
                switch(meal.getMealType()) {
                    case Constants.BREAKFAST:
                         breakfastComboBox.setSelectedItem(matchRecipeToMeal(meal));
                        break;
                    case Constants.LUNCH:
                        lunchComboBox.setSelectedItem(matchRecipeToMeal(meal));
                        break;
                    case Constants.DINNER:
                        dinnerComboBox.setSelectedItem(matchRecipeToMeal(meal));
                        break;
                }
            }
        }
    }//GEN-LAST:event_dayOfWeekComboBoxActionPerformed

    private void saveMealsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMealsButtonActionPerformed
        String dayOfWeek = ((String) dayOfWeekComboBox.getSelectedItem()).toLowerCase();
        
        Recipe breakfastRecipe = (Recipe) breakfastComboBox.getSelectedItem();
        Recipe lunchRecipe = (Recipe) lunchComboBox.getSelectedItem();
        Recipe dinnerRecipe = (Recipe) dinnerComboBox.getSelectedItem();
        
        Meal breakfastMeal = matchMealToRecipe(breakfastRecipe);
        Meal lunchMeal = matchMealToRecipe(lunchRecipe);
        Meal dinnerMeal = matchMealToRecipe(dinnerRecipe);
        
        RecipeMeal breakfastMealRecipe = matchRecipeMeal(breakfastRecipe, breakfastMeal);
        RecipeMeal lunchMealRecipe = matchRecipeMeal(lunchRecipe, lunchMeal);
        RecipeMeal dinnerMealRecipe = matchRecipeMeal(dinnerRecipe, dinnerMeal);
        
        //if the meal is null, then we need to create a new meal
        //if the meal is not null, then we will need to ensure it isn't already a part of a MealRecipe. go on to see how
        
        //if the mealRecipe is not null, then don't need to do anything
        //if the mealRecipe is null, then we need to add the meal to a recipe
            //before saving the mealRecipe, we need to make sure that a mealRecipe isn't already referencing the meal
            //if so, we need to delete the old mealRecipe and create a whole new one with the meal and the recipe
    }//GEN-LAST:event_saveMealsButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<Recipe> breakfastComboBox;
    private javax.swing.JComboBox<String> dayOfWeekComboBox;
    private javax.swing.JComboBox<Recipe> dinnerComboBox;
    private javax.swing.JButton generateListButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JComboBox<Recipe> lunchComboBox;
    private javax.swing.JButton saveMealsButton;
    private javax.swing.JLabel startOfWeekLabel;
    // End of variables declaration//GEN-END:variables
    
    private Recipe matchRecipeToMeal(Meal meal) {
        String recipeName = null;
        if(meal != null) {
            for(RecipeMeal recipeMeal : recipeMeals) {
                if(recipeMeal.getMealId().equals(meal.getId())) {
                    recipeName = recipeMeal.getRecipeName();
                    break;
                }
            }
            
            if(recipeName != null) {
                for(Recipe recipe : recipes) {
                    if(recipe.getName().equals(recipeName)) {
                        return recipe;
                    }
                }
            }
        }
        
        return null;
    }
    
    private Meal matchMealToRecipe(Recipe recipe) {
        Integer mealId = null;
        if(recipe != null) {
            for(RecipeMeal recipeMeal : recipeMeals) {
                if(recipeMeal.getRecipeName().equals(recipe.getName())) {
                    mealId = recipeMeal.getMealId();
                    break;
                }
            }
            
            if(mealId != null) {
                for(Meal meal : meals) {
                    if(meal.getId().equals(mealId)) {
                        return meal;
                    }
                }
            }
        }
        
        return null;
    }
    
    private RecipeMeal matchRecipeMeal(Recipe recipe, Meal meal) {
        if(recipe != null && meal != null) {
            for(RecipeMeal recipeMeal : recipeMeals) {
                if(recipeMeal.getMealId().equals(meal.getId()) 
                        && recipeMeal.getRecipeName().equals(recipe.getName())) {
                    return recipeMeal;
                }
            }
        }
        
        return null;
    }
}
